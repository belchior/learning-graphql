input FollowerInput {
  id: ID
  login: String
}

type Language {
  color: String
  name: String
}

input LanguageInput {
  color: String
  name: String
}

type License {
  name: String
}

input LicenseInput {
  name: String
}

type Mutation {
  addUserFollower(id: ID!, input: FollowerInput!): User
  createUser(input: UserInput!): User
  removeUserFollower(id: ID!): User
  updateUserName(id: ID!, input: String!): User
  createRepository(input: RepositoryInput!): Repository
}

interface Node {
  id: ID!
}

type Organization implements Node & RepositoryOwner {
  avatarUrl: String
  email: String
  id: ID!
  location: String
  login: String!
  name: String!
  url: String!
  websiteUrl: String
}

type OrganizationConnection {
  edges: [OrganizationEdge]!
  pageInfo: PageInfo!
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Query {
  user(login: String!): User
}

type Repository implements Node {
  description: String
  forkCount: Int
  id: ID!
  licenseInfo: License
  name: String!
  owner: RepositoryOwner!
  primaryLanguage: Language
  url: String!
}

type RepositoryConnection {
  edges: [RepositoryEdge]!
  pageInfo: PageInfo!
}

type RepositoryEdge {
  cursor: String!
  node: Repository
}

input RepositoryInput {
  description: String
  forkCount: Int
  licenseInfo: LicenseInput
  name: String
  ownerLogin: String
  primaryLanguage: LanguageInput
  url: String
}

interface RepositoryOwner {
  avatarUrl: String
  id: ID!
  login: String!
  name: String!
  url: String!
}

type User implements Node & RepositoryOwner {
  avatarUrl: String
  bio: String
  company: String
  email: String!
  followers(after: String, before: String, first: Int, last: Int): UserConnection!
  following(after: String, before: String, first: Int, last: Int): UserConnection!
  id: ID!
  location: String
  login: String!
  name: String!
  organizations(after: String, before: String, first: Int, last: Int): OrganizationConnection!
  repositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  starredRepositories(after: String, before: String, first: Int, last: Int): RepositoryConnection!
  url: String!
  websiteUrl: String
}

type UserConnection {
  edges: [UserEdge]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User
}

input UserInput {
  avatarUrl: String
  bio: String
  company: String
  email: String
  location: String
  login: String
  name: String
  url: String
  websiteUrl: String
}
